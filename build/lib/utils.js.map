{"version":3,"sources":["../../src/utils.js"],"names":["isString","String","isFunction","Function","isPromise","Promise","runIfFunc","maybeFunc","args","log","message","val","console","setByPath","path","value","obj","store","currentVal","newVal","setByPromise","setByObj","valuesObj","Object","entries","reduce","resultObj","key","set","maybePath","promise","then","data","action","error","isLoading","dispatch","catch","getState"],"mappings":"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","sourcesContent":["import { is, curry } from 'ramda'\n\nimport { setIn, getIn } from './set-utils'\nimport { set as setState } from './index'\n\nconst isString = is(String)\nexport const isFunction = is(Function)\nconst isPromise = is(Promise)\n\nexport const runIfFunc = (maybeFunc, ...args) =>\n  isFunction(maybeFunc) ? maybeFunc(...args) : maybeFunc\n\nexport const log = curry((message, val) => {\n  console.log(`${message}: `, val)\n  return val\n})\n\nconst setByPath = curry((path, value, obj, store = null) => {\n  const currentVal = getIn(path, obj)\n  const newVal = runIfFunc(value, currentVal)\n  return isPromise(newVal)\n    ? setByPromise(path, newVal, obj, store)\n    : setIn(path, newVal, obj)\n})\n\nconst setByObj = curry((valuesObj, obj, store = null) =>\n  Object.entries(valuesObj).reduce((resultObj, [key, value]) => {\n    const currentVal = getIn(key, resultObj)\n    const newVal = runIfFunc(value, currentVal)\n\n    return isPromise(newVal)\n      ? setByPromise(key, newVal, resultObj, store)\n      : setIn(key, newVal, resultObj)\n  }, obj)\n)\n\nexport const set = (...args) => {\n  const [maybePath] = args\n  if (isString(maybePath)) {\n    return setByPath(...args)\n  }\n  return setByObj(...args)\n}\n\nfunction setByPromise(path, promise, obj, store) {\n  promise\n    .then(data => {\n      const action = setState(path, {\n        error: null,\n        isLoading: false,\n        data: data\n      })\n      store.dispatch(action)\n    })\n    .catch(error => {\n      const action = setState(path, {\n        error: error,\n        isLoading: false,\n        data: null\n      })\n      store.dispatch(action)\n    })\n  return set(\n    path,\n    {\n      error: null,\n      isLoading: true,\n      data: getIn(`${path}.data`, store.getState(), null)\n    },\n    obj,\n    store\n  )\n}\n\nexport { getIn as get }\n"],"file":"utils.js"}