{"version":3,"sources":["../../src/set-utils.js"],"names":["charCodeOfDot","charCodeAt","reEscapeChar","rePropName","RegExp","stringToPath","string","result","push","replace","match","expression","quote","subString","key","trim","keyInt","parseInt","Error","toPath","value","Array","isArray","setIn","path","val","obj","lensPath","lens","getIn","def","undefined"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,aAAa,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAtB;AACA,IAAMC,YAAY,GAAG,UAArB;AACA,IAAMC,UAAU,GAAGC,MAAM,EACvB;AACA,cACE,GADF,GAEE;AACA,QAHF,GAIE;AACA,eALF,GAME,GANF,GAOE;AACA,wCARF,GASE,MATF,GAUE,GAVF,GAWE;AACA,oCAdqB,EAevB,GAfuB,CAAzB;AAiBA;;;;;;;;AAOA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,MAAM,EAAI;AAC7B,MAAMC,MAAM,GAAG,EAAf;;AACA,MAAID,MAAM,CAACL,UAAP,CAAkB,CAAlB,MAAyBD,aAA7B,EAA4C;AAC1CO,IAAAA,MAAM,CAACC,IAAP,CAAY,EAAZ;AACD;;AACDF,EAAAA,MAAM,CAACG,OAAP,CAAeN,UAAf,EAA2B,UAACO,KAAD,EAAQC,UAAR,EAAoBC,KAApB,EAA2BC,SAA3B,EAAyC;AAClE,QAAIC,GAAG,GAAGJ,KAAV;;AACA,QAAIE,KAAJ,EAAW;AACT,UAAME,IAAG,GAAGD,SAAS,CAACJ,OAAV,CAAkBP,YAAlB,EAAgC,IAAhC,CAAZ;;AACA,aAAOK,MAAM,CAACC,IAAP,CAAYM,IAAZ,CAAP;AACD;;AACD,QAAIH,UAAJ,EAAgB;AACd,UAAMG,KAAG,GAAGH,UAAU,CAACI,IAAX,EAAZ;;AACA,UAAMC,MAAM,GAAGC,QAAQ,CAACH,KAAD,EAAM,EAAN,CAAvB;;AACA,UAAIA,KAAG,IAAIE,MAAX,EAAmB;AACjB,eAAOT,MAAM,CAACC,IAAP,CAAYQ,MAAZ,CAAP;AACD;;AACD,YAAME,KAAK,kBAAWR,KAAX,wBAAX;AACD;;AACDH,IAAAA,MAAM,CAACC,IAAP,CAAYM,GAAZ;AACD,GAfD;AAgBA,SAAOP,MAAP;AACD,CAtBD;AAwBA;;;;;;;;;;;;;;;;;AAeO,IAAMY,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SACzBC,KAAK,CAACC,OAAN,CAAcF,KAAd,IAAuBA,KAAvB,GAA+Bf,YAAY,CAACe,KAAD,CADlB;AAAA,CAApB;;;AAGA,IAAMG,KAAK,GAAG,kBAAM,UAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ;AAAA,SACzB,iBAAKP,MAAL,EAAaQ,eAAb,EAAuB,UAAAC,IAAI;AAAA,WAAI,gBAAKA,IAAL,EAAWH,GAAX,EAAgBC,GAAhB,CAAJ;AAAA,GAA3B,EAAqDF,IAArD,CADyB;AAAA,CAAN,CAAd;;AAIA,IAAMK,KAAK,GAAG,kBAAM,UAACL,IAAD,EAAOE,GAAP;AAAA,MAAYI,GAAZ,uEAAkBC,SAAlB;AAAA,SACzB,iBACEZ,MADF,EAEEQ,eAFF,EAGE,UAAAC,IAAI;AAAA,WAAI,iBAAMA,IAAN,EAAYF,GAAZ,CAAJ;AAAA,GAHN,EAIE,UAAAD,GAAG;AAAA,WAAKA,GAAG,KAAKM,SAAR,GAAoBD,GAApB,GAA0BL,GAA/B;AAAA,GAJL,EAKED,IALF,CADyB;AAAA,CAAN,CAAd","sourcesContent":["import { set as rSet, view as rView, lensPath, curry, pipe } from 'ramda'\n\nconst charCodeOfDot = '.'.charCodeAt(0)\nconst reEscapeChar = /\\\\(\\\\)?/g\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  '[^.[\\\\]]+' +\n    '|' +\n    // Or match property names within brackets.\n    '\\\\[(?:' +\n    // Match a non-string expression.\n    '([^\"\\'][^[]*)' +\n    '|' +\n    // Or match strings (supports escaping characters).\n    '([\"\\'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2' +\n    ')\\\\]' +\n    '|' +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    '(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))',\n  'g'\n)\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nconst stringToPath = string => {\n  const result = []\n  if (string.charCodeAt(0) === charCodeOfDot) {\n    result.push('')\n  }\n  string.replace(rePropName, (match, expression, quote, subString) => {\n    let key = match\n    if (quote) {\n      const key = subString.replace(reEscapeChar, '$1')\n      return result.push(key)\n    }\n    if (expression) {\n      const key = expression.trim()\n      const keyInt = parseInt(key, 10)\n      if (key == keyInt) {\n        return result.push(keyInt)\n      }\n      throw Error(`Key in ${match} should be integer`)\n    }\n    result.push(key)\n  })\n  return result\n}\n\n/**\n * Converts `value` to a property path array.\n *\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * toPath('a.b.c')\n * // => ['a', 'b', 'c']\n *\n * toPath('a[0].b.c')\n * // => ['a', 0, 'b', 'c']\n */\nexport const toPath = value =>\n  Array.isArray(value) ? value : stringToPath(value)\n\nexport const setIn = curry((path, val, obj) =>\n  pipe(toPath, lensPath, lens => rSet(lens, val, obj))(path)\n)\n\nexport const getIn = curry((path, obj, def = undefined) =>\n  pipe(\n    toPath,\n    lensPath,\n    lens => rView(lens, obj),\n    val => (val === undefined ? def : val)\n  )(path)\n)\n"],"file":"set-utils.js"}